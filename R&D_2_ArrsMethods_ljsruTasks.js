//================================================
//================================================
//       Переведите текст вида border-left-
//            width в borderLeftWidth
//================================================
//================================================
/*
    Напишите функцию camelize(str), которая 
    преобразует строки вида «my-short-string» 
    в «myShortString».

То есть дефисы удаляются, а все слова после них 
получают заглавную букву.
P.S. Подсказка: используйте split, чтобы разбить 
строку на массив символов, потом переделайте всё 
как нужно и методом join соедините обратно.
*/
{
  let str1 = "background-color";
  let str2 = "list-style-image";
  let str3 = "-webkit-transition";

  function camelize(str) {
    let items = str.split("");
    items.forEach((el, i) => {
      if (el === "-") {
        items.splice(i, 2, items[i + 1].toUpperCase());
      }
    });

    return items.join("");
  }

  // console.log(camelize(str1));
  // console.log(camelize(str2));
  // console.log(camelize(str3));
}

//================================================
//================================================
//                Фильтрация по диапазону
//================================================
//================================================
/*
Напишите функцию filterRange(arr, a, b), которая 
принимает массив arr, ищет элементы со значениями 
больше или равными a и меньше или равными b и 
возвращает результат в виде массива.

Функция должна возвращать новый массив и не 
изменять исходный.
*/
{
  let arr = [5, 3, 8, 1];

  function filterRange(arr, a, b) {
    return arr.filter((i) => i >= a && i <= b);
  }

  let filtered = filterRange(arr, 1, 4);

  // console.log( filtered ); // 3,1 (совпадающие значения)

  // console.log( arr ); // 5,3,8,1 (без изменений)
}

//================================================
//================================================
//      Фильтрация по диапазону "на месте"
//================================================
//================================================
/*
Напишите функцию filterRangeInPlace(arr, a, b), 
которая принимает массив arr и удаляет из него все 
значения кроме тех, которые находятся между a и b. 
То есть, проверка имеет вид a ≤ arr[i] ≤ b.

Функция должна изменять принимаемый массив и 
ничего не возвращать.
*/
{
  let arr = [5, 3, 8, 1];
  filterRangeInPlace(arr, 1, 4);
  // console.log( arr ); // [3, 1]);

  function filterRangeInPlace(arr, a, b) {
    arr.forEach((el, i) => {
      if (!(a <= el && el <= b)) {
        arr.splice(i, 1);
      }
    });
  }
}

//================================================
//================================================
//        Сортировать в порядке по убыванию
//================================================
//================================================
{
  let arr = [5, 2, 1, -10, 8];

  arr.sort((a, b) => b - a);

  // console.log( arr ); // 8, 5, 2, 1, -10
}

//================================================
//================================================
//       Скопировать и отсортировать массив
//================================================
//================================================
/*
У нас есть массив строк arr. Нужно получить 
отсортированную копию, но оставить arr 
неизменённым.

Создайте функцию copySorted(arr), 
которая будет возвращать такую копию.
*/
{
  let arr = ["HTML", "JavaScript", "CSS"];

  let sorted = copySorted(arr);

  function copySorted(arr) {
    return arr.slice().sort();
  }

  // console.log( sorted ); // CSS, HTML, JavaScript
  // console.log( arr );
  // HTML, JavaScript, CSS (без изменений)
}

//================================================
//================================================
//      Создать расширяемый калькулятор
//================================================
//================================================
/*
Создайте функцию конструктор Calculator, которая 
создаёт «расширяемые» объекты калькулятора.

Задание состоит из двух частей.

1). Во-первых, реализуйте метод calculate(str), 
который принимает строку типа "1 + 2" в формате 
«ЧИСЛО оператор ЧИСЛО» (разделено пробелами) и 
возвращает результат. Метод должен понимать 
плюс + и минус -.

Пример использования:
let calc = new Calculator;
alert( calc.calculate("3 + 7") ); // 10

2). Затем добавьте метод addMethod(name, func), 
который добавляет в калькулятор новые операции. 
Он принимает оператор name и функцию с двумя 
аргументами func(a,b), которая описывает его.

Например, 
давайте добавим умножение *, 
деление / 
и возведение в степень **:

let powerCalc = new Calculator;
powerCalc.addMethod("*", (a, b) => a * b);
powerCalc.addMethod("/", (a, b) => a / b);
powerCalc.addMethod("**", (a, b) => a ** b);

let result = powerCalc.calculate("2 ** 3");
alert( result ); // 8
*/
{
  let calc = new Calculator();

  function Calculator() {
    this.methods = {
        "-": (a, b) => a - b,
        "+": (a, b) => a + b
    };

    this.calculate = function (str) {
      let split = str.split(" "),
      a = +split[0],
      op = split[1],
      b = +split[2];

      if (!this.methods[op] || isNaN(a) || isNaN(b)) {
        return NaN;
      }

      return this.methods[op](a,b);
    };

    this.addMethod = function (name, func) {
      return this.method(a,b);
    };
  }

  console.log(calc.calculate("3 + 7")); //
}
